fragment SettingPair on ISetting {
  name
  value
}

fragment MessageFrag on IMessage {
  fromUserId
  id
  messageType
  severity
  time
  title
}

fragment PageInfoFrag on CollectionSegmentInfo {
  hasPreviousPage
  hasNextPage
}

mutation authenticate($phoneOrEmail: String!, $password: String!) {
  authenticate(input: { userIdentifier: $phoneOrEmail, password: $password }) {
    value
  }
}

mutation assignRoles($userId: ObjectId!, $roleId: String!) {
  assignRoles(input: { userId: $userId, roles: [$roleId] })
}

mutation registerAndSignIn($phoneOrEmail: String!, $password: String!) {
  register(input: { phoneOrEmail: $phoneOrEmail, password: $password, userName: $phoneOrEmail })
  authenticate(input: { userIdentifier: $phoneOrEmail, password: $password }) {
    value
  }
}

query userProfile($userIdentifier: String!) {
  userProfile(userIdentifier: $userIdentifier) {
    avatar
    userName
  }
}

mutation updateProfile($newAvatar: String, $userId: ObjectId!) {
  updateProfile(input: { newAvatar: $newAvatar, userId: $userId })
}

query settings {
  settings(input: { scope: GLOBAL }) {
    ...SettingPair
  }
}

mutation updateSetting(
  $settingScope: SettingScopeEnumeration!
  $settingName: SettingDefinition!
  $settingValue: String
  $settingScopeKey: String
) {
  updateSetting(input: { name: $settingName, scope: $settingScope, scopedKey: $settingScopeKey, value: $settingValue }) {
    name
    value
  }
}

mutation sendSmsCaptcha($phoneOrEmail: ChinesePhoneNumberType!) {
  generateCaptcha(input: { captchaProvider: SMS, smsCaptchaPhoneNumber: $phoneOrEmail }) {
    captchaType
    key
  }
}

mutation validateSmsCaptcha($captchaKey: String!, $captchaCode: String!) {
  validateCaptcha(input: { captchaProvider: SMS, captchaKey: $captchaKey, captchaCode: $captchaCode })
}

query initSettings {
  settings(input: {}) {
    name
    value
  }
}

subscription onFrontendCall {
  onFrontendCall {
    frontendCallType
  }
}

query messages($skip: Int, $take: Int, $filter: IMessageFilterInput) {
  messages(skip: $skip, take: $take, where: $filter) {
    items {
      ...MessageFrag
    }
    pageInfo {
      ...PageInfoFrag
    }
    totalCount
  }
}

mutation sendMessage($toUserId: String!, $messageContent: String!) {
  sendMessage(input: { toUserIds: [$toUserId], severity: INFO, text: $messageContent })
}
